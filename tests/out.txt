No file, running fast test...
['(', 'defun', 'factorial', '(', 'n', ')', '"Computes the factorial of a number recursively."', '(', 'if', '(', '<=', 'n', '1', ')', '1', '(', '*', 'n', '(', 'factorial', '(', '-', 'n', '1', ')', ')', ')', ')', ')']
(BuiltIn.DEFUN) defun
  (AtomType.SYMBOL) factorial
  (AtomType.LIST) ['n']
  (AtomType.STRING) "Computes the factorial of a number recursively."
  (BuiltIn.IF) if
    (BuiltIn.LEQ) <=
      (AtomType.SYMBOL) n
      (AtomType.STRING) 1
    (AtomType.STRING) 1
    (BuiltIn.MULT) *
      (AtomType.SYMBOL) n
      (AtomType.SYMBOL) factorial
        (BuiltIn.SUB) -
          (AtomType.SYMBOL) n
          (AtomType.STRING) 1
['(', 'defun', 'fibonacci', '(', 'n', ')', '"Computes the nth Fibonacci number using recursion."', '(', 'if', '(', '<=', 'n', '1', ')', 'n', '(', '+', '(', 'fibonacci', '(', '-', 'n', '1', ')', ')', '(', 'fibonacci', '(', '-', 'n', '2', ')', ')', ')', ')', ')']
(BuiltIn.DEFUN) defun
  (AtomType.SYMBOL) fibonacci
  (AtomType.LIST) ['n']
  (AtomType.STRING) "Computes the nth Fibonacci number using recursion."
  (BuiltIn.IF) if
    (BuiltIn.LEQ) <=
      (AtomType.SYMBOL) n
      (AtomType.STRING) 1
    (AtomType.SYMBOL) n
    (BuiltIn.ADD) +
      (AtomType.SYMBOL) fibonacci
        (BuiltIn.SUB) -
          (AtomType.SYMBOL) n
          (AtomType.STRING) 1
      (AtomType.SYMBOL) fibonacci
        (BuiltIn.SUB) -
          (AtomType.SYMBOL) n
          (AtomType.STRING) 2
['(', 'cond', '(', '(', '>', 'x', '10', ')', '"Greater than 10"', ')', '(', '(', '<', 'x', '10', ')', '"Less than 10"', ')', '(', '(', '=', 'x', '10', ')', '"Equal to 10!"', ')', '(', 't', '(', 'quote', 'other', ')', ')']
(BuiltIn.COND) cond
  (AtomType.SYMBOL) >
    (AtomType.SYMBOL) x
    (AtomType.STRING) 10
  (AtomType.STRING) "Greater than 10"
  (AtomType.SYMBOL) <
    (AtomType.SYMBOL) x
    (AtomType.STRING) 10
  (AtomType.STRING) "Less than 10"
  (AtomType.SYMBOL) =
    (AtomType.SYMBOL) x
    (AtomType.STRING) 10
  (AtomType.STRING) "Equal to 10!"
  (BuiltIn.QUOTE) quote
    (AtomType.SYMBOL) other
['(', 'defun', 'filter', '(', 'pred', 'lst', ')', '"Filters a list based on a predicate function."', '(', 'cond', '(', '(', 'null', 'lst', ')', '(', 'quote', '(', ')', ')', '(', '(', 'funcall', 'pred', '(', 'car', 'lst', ')', ')', '(', 'cons', '(', 'car', 'lst', ')', '(', 'filter', 'pred', '(', 'cdr', 'lst', ')', ')', ')', ')', '(', 't', '(', 'filter', 'pred', '(', 'cdr', 'lst', ')', ')', ')', ')', ')']
(BuiltIn.DEFUN) defun
  (AtomType.SYMBOL) filter
  (AtomType.LIST) ['pred', 'lst']
  (AtomType.STRING) "Filters a list based on a predicate function."
  (BuiltIn.COND) cond
    (AtomType.SYMBOL) null
      (AtomType.SYMBOL) lst
    (BuiltIn.QUOTE) quote
      (AtomType.SYMBOL) )
      (AtomType.SYMBOL) (
        (AtomType.SYMBOL) funcall
        (AtomType.SYMBOL) pred
        (AtomType.SYMBOL) car
          (AtomType.SYMBOL) lst
      (AtomType.SYMBOL) cons
        (AtomType.SYMBOL) car
          (AtomType.SYMBOL) lst
        (AtomType.SYMBOL) filter
          (AtomType.SYMBOL) pred
          (AtomType.SYMBOL) cdr
            (AtomType.SYMBOL) lst
    (AtomType.SYMBOL) filter
      (AtomType.SYMBOL) pred
      (AtomType.SYMBOL) cdr
        (AtomType.SYMBOL) lst
    (AtomType.SYMBOL) )
